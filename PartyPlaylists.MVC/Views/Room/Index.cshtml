@model RoomVM
@{
    ViewData["Title"] = "Index";
}

<input type="hidden" id="jwtToken" name="jwtToken" value="@Model.JwtToken">
<input type="hidden" id="roomId" name="roomId" value="@Model.CurrentRoom.Id">
@if (string.IsNullOrEmpty(Model.SyncSpotifyAuthCode))
{
    <input type="hidden" id="spotifyAuthCode" name="spotifyAuthCode" value="@Model.CurrentRoom.SpotifyAuthCode" />
}
else
{
    <input type="hidden" id="spotifyAuthCode" name="spotifyAuthCode" value="@Model.SyncSpotifyAuthCode" />
}

<div class="row">
    <div class="col">
        <div class="card">
            <div class="card-header green">
                <h1 class="card-title text-dark display-3 text-uppercase" id="roomNameHeader">@Model.CurrentRoom.Name</h1>
                <h2 class="card-subtitle text-muted">By: @Model.CurrentRoom.Owner</h2>
            </div>

            <div class="card-body">
                <div class="row">
                    <div class="col-sm-7 scrollable-col">
                        @if (Model?.CurrentRoom != null)
                        {
                            <ul class="list-group list-group-flush" id="listOfSongs">
                                <partial name="Components/_roomSongListItem" model="Model.CurrentRoom.RoomSongs" />
                            </ul>
                        }
                    </div>
                    <div class="col-sm-5">
                        <div class="card inner-card-dark text-white">
                            <div class="card-body">
                                @if (string.IsNullOrEmpty(Model.CurrentRoom.SpotifyAuthCode))
                                {
                                    <form method="get" asp-controller="Room" asp-action="AuthorizeSpotify">
                                        <input type="hidden" asp-for="@Model.CurrentRoom.Id">
                                        <button class="btn btn-primary" type="submit" id="authorizeSpotifyButton">Authorize Spotify</button>
                                    </form>
                                }
                                else
                                {
                                <div class="form-group">
                                    <label>Song: </label>
                                    <div id="searchContainer" class="search-container">
                                        <input type="hidden" id="hiddenInput" asp-for="@Model.SongToAdd" />
                                        <input type="text" class="select-list-group__search form form-control" placeholder="Song" id="songToAdd" name="songToAdd" />
                                        <ul class="select-list-group search-list" data-toggle="false" id="songListGroup">
                                        </ul>
                                    </div>
                                </div>
                                }
                            </div>
                            <div class="card-footer">
                                <div class="row">
                                    @if (!string.IsNullOrEmpty(Model?.CurrentRoom?.SpotifyAuthCode))
                                    {
                                        <div class="col">
                                            @if ((Model.CurrentRoom.Owner == Model.CurrentUserName || Model.CurrentRoom.AllowTransferOfControl))
                                            {
                                                <button class="btn btn-primary" type="button" id="startPlaylistButton"><i class="fas fa-play"></i></button>
                                                <button class="btn btn-primary" type="button" id="nextSongButton"><i class="fas fa-step-forward"></i></button>
                                            }
                                            else
                                            {
                                                @if (string.IsNullOrEmpty(Model.SyncSpotifyAuthCode))
                                                {
                                                    <button class="btn btn-primary" type="submit" id="syncAuthorizeMusicButton">Sync Authorize</button>
                                                }
                                                else
                                                {
                                                    <button class="btn btn-primary" type="submit" id="syncMusicButton">Sync</button>
                                                }
                                            }
                                        </div>
                                        <div class="col-auto">
                                            @if (Model.CurrentRoom.Owner == Model.CurrentUserName)
                                            {
                                                <div class="custom-control custom-switch">
                                                    <input type="checkbox" class="custom-control-input" asp-for="@Model.CurrentRoom.AllowTransferOfControl" id="transferControlSwitch">
                                                    <label class="custom-control-label" for="transferControlSwitch">Allow Playlist Control</label>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        $(document).ready(function () {
            $("#syncAuthorizeMusicButton").click(function () {
                $.ajax({
                    url: "/room/AuthorizeSpotify",
                    type: "GET",
                    data: {
                        "CurrentRoom.Id": $("#roomId")[0].value,
                        "SyncAuthorization": true
                    },
                    headers: {
                    },
                    success: function (data) {
                        window.location.replace(data);
                    },
                    error: function (data) {
                        console.log(data);
                    }
                });
            });
        });
    </script>

    <script>
        function postSongVote(songId) {
            $.ajax({
                url: "/room/addvotetosong",
                type: "POST",
                data: {
                    "roomId": $("#roomId")[0].value,
                    "songId": songId
                },
                headers: {
                    'Authorization': "Bearer " + $("#jwtToken")[0].value,
                },
                success: function (data) {
                    $("#listOfSongs").html(data);
                    $("[name='addVoteButton']").off('click');
                    $("[name='addVoteButton']").click(function () { postSongVote($(this).val()); });
                },
                error: function (data) {
                    console.log(data);
                }
            });
        }
    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            $("[name='addVoteButton']").off().click(function () { postSongVote($(this).val()); });
        });
    </script>
    <script>
        $(document).ready(function () {
            $("#listOfSongs").bind('songAdded', function () {
                $("[name='addVoteButton']").off().click(function () { postSongVote($(this).val()); });
            });
        });
    </script>

    <script src="https://sdk.scdn.co/spotify-player.js"></script>
    <script>
        window.onSpotifyWebPlaybackSDKReady = () => {
            const token = $("#spotifyAuthCode").val();
            const player = new Spotify.Player({
                name: 'PartyPlaylist - ' + $("#roomNameHeader").html(),
                getOAuthToken: cb => { cb(token); }
            });
            var timeToSeek = 0;

            // Error handling
            player.addListener('initialization_error', ({ message }) => { console.error(message); });
            player.addListener('authentication_error', ({ message }) => { console.error(message); });
            player.addListener('account_error', ({ message }) => { console.error(message); });
            player.addListener('playback_error', ({ message }) => { console.error(message); });

            // Playback status updates
            player.addListener('player_state_changed', state => {
                if (timeToSeek != 0) {
                    console.log(timeToSeek);
                    player.seek(timeToSeek).then(() => {
                        console.log("sook");
                        timeToSeek = 0;
                    });
                }
                if (state.paused) {
                    console.log("state paused");
                    $.ajax({
                        url: "/room/GetNextSongToPlay",
                        type: "GET",
                        data: {
                            "roomId": $("#roomId")[0].value,
                            "songUri": state.track_window.current_track.uri,
                        },
                        headers: {
                        },
                        success: function (data) {
                            connection.invoke("UpdateSongsAsync", $("#roomId")[0].value + "").catch(err => console.error(err.toString()));
                            StartPlaylist(player, data);
                        },
                        error: function (data) {
                            console.log(data);
                        }
                    });
                }
            });

            // Ready
            player.addListener('ready', ({ device_id }) => {
                console.log('Ready with Device ID', device_id);
            });

            // Not Ready
            player.addListener('not_ready', ({ device_id }) => {
                console.log('Device ID has gone offline', device_id);
            });

            // Connect to the player!
            player.connect();

            $("#startPlaylistButton").click(function () {
                StartPlaylist(player, $("[name='playerUri']").first().html());
                $.ajax({
                    url: "/room/MarkCurrentSongAsPlayed",
                    type: "POST",
                    data: {
                        "roomId": $("#roomId")[0].value,
                    },
                    headers: {
                        'Authorization': "Bearer " + $("#jwtToken")[0].value,
                    },
                    success: function (data) {
                        connection.invoke("UpdateSongsAsync", $("#roomId")[0].value + "").catch(err => console.error(err.toString()));
                    },
                    error: function (data) {
                        console.log(data);
                    }
                });
            });

            $("#syncMusicButton").click(function () {
                $.ajax({
                    url: "/room/GetCurrentSongPosistion",
                    type: "GET",
                    data: {
                        "roomId": $("#roomId")[0].value,
                    },
                    headers: {
                        'Authorization': "Bearer " + $("#jwtToken")[0].value,
                    },
                    success: function (data) {
                        timeToSeek = data;
                        StartPlaylist(player, $("[name='playerUri']").first().html());
                    },
                    error: function (data) {
                        console.log(data);
                    }
                });
            });

            $("#nextSongButton").click(function () {
                player.nextTrack().then(() => {
                });
            });
        };
    </script>
    <script>
        function StartPlaylist(player, songUriToPlay) {
            const play = ({
                spotify_uri,
                playerInstance: {
                    _options: {
                        getOAuthToken,
                        id
                    }
                }
            }) => {
                getOAuthToken(access_token => {
                    fetch(`https://api.spotify.com/v1/me/player/play?device_id=${id}`, {
                        method: 'PUT',
                        body: JSON.stringify({ uris: [spotify_uri] }),
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${access_token}`
                        },
                    });
                });
            };
            play({
                playerInstance: player,
                spotify_uri: songUriToPlay,
            });
        }
    </script>
    <script src="~/js/roomhub.js"></script>

    <script>
        $(document).ready(function () {
            $("#transferControlSwitch").click(function () {
                $.ajax({
                    url: "/room/UpdateTransferOfControl",
                    type: "POST",
                    data: {
                        "roomId": $("#roomId")[0].value,
                        "allowTransferOfControl": $(this).prop("checked"),
                    },
                    headers: {
                        'Authorization': "Bearer " + $("#jwtToken")[0].value,
                    },
                    success: function (data) {
                    },
                    error: function (data) {
                        console.log(data);
                    }
                });
            });
        });
    </script>
    <script src="~/js/selectList.js"></script>
}
