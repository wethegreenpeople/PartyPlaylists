@page "/"
@using DataModel = PartyPlaylists.Models.DataModels
@using PartyPlaylists.Services;
@using PartyPlaylists.Models;
@using SpotifyApi.NetCore;
@using System.Web;
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@using PartyPlaylists.Contexts;

@inject NavigationManager NavigationManager;
@inject PlaylistContext PlaylistContext;
@inject UserAccountsService UserAccountsService;
@inject TokenService TokenService;
@inject SessionStorage SessionStorage;
@inject SpotifyService SpotifyService;

<h1>PartyPlaylists</h1>

<EditForm Model="@room" OnValidSubmit="CreateRoom">
    <label>Room Name:</label>
    <br />
    <InputText @bind-Value="room.Name" />
    <br />
    <br />
    <button type="submit">Create Room</button>
</EditForm>

<br />
<br />
<label>Room ID</label>
<br />
<input type="text" @bind-value="_roomId" />
<br />
<br />
<button type="button" @onclick="JoinRoom">Join Room</button>

@code
{
    private string _parsedAuthCode;
    private string _parsedStateCode;
    private string _roomId;
    private DataModel.Room room = new DataModel.Room();
    private RoomDataStore _roomDataStore;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += LocationChanged();
        _roomDataStore = new RoomDataStore(PlaylistContext);
    }

    private async Task JoinRoom()
    {
        if (!string.IsNullOrWhiteSpace(_roomId))
        {
            if ((await SessionStorage.GetItemAsync($"room{_roomId}") == null))
                await SessionStorage.SetItemAsync($"room{_roomId}", await TokenService.GetToken());
            NavigationManager.NavigateTo($"/room/{_roomId}");
        }
    }

    private async Task CreateRoom()
    {
        var token = await TokenService.GetToken();
        room = await _roomDataStore.AddItemAsync(room, token);
        _roomId = room?.Id.ToString();
        await SessionStorage.SetItemAsync($"room{_roomId}", token);
        await JoinRoom();
    }

    private async Task SaveSpotifyTokenToRoom()
    {
        NavigationManager.NavigateTo($"/room/{_parsedStateCode}", forceLoad: true);
        SpotifyService.AuthToken = (await UserAccountsService.RequestAccessRefreshToken(_parsedAuthCode)).AccessToken;
        await _roomDataStore.AddSpotifyAuthCodeToRoomAsync(_parsedStateCode, SpotifyService.AuthToken);
    }

    public EventHandler<LocationChangedEventArgs> LocationChanged()
    {
        var uri = new Uri(NavigationManager.Uri);
        _parsedAuthCode = HttpUtility.ParseQueryString(uri.Query).Get("code");
        _parsedStateCode = HttpUtility.ParseQueryString(uri.Query).Get("state");
        if (_parsedAuthCode != null && _parsedStateCode != null)
            SaveSpotifyTokenToRoom();

        return null;
    }
}
